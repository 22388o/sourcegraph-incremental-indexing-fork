extend type Query {
    """
    [Experimental] Query for all insights and return their aggregations.
    """
    insights(
        """
        An (optional) array of insight unique ids that will filter the results by the provided values. If omitted, all available insights will return.
        """
        ids: [ID!]
    ): InsightConnection
}

extend type Mutation {
    """
    Create a new dashboard. Permissions will automatically be granted to the user creating the dashboard.
    """
    createDashboard(input: DashboardInput!): Dashboard!

    """
    Edit an existing dashboard.
    """
    editDashboard(id: ID!, input: DashboardInput!): Dashboard!

    """
    Delete a dashboard. Any views that would become dangling will be deleted.
    """
    deleteDashboard(input: ID!): EmptyResponse!

    """
    Associate an existing insight view with this dashboard. This will create a duplicate view such that changes
    """
    attachView(id: ID!, viewID: ID!): Dashboard!

    """
    Remove an insight view from this dashboard. If the view would become dangling it will be deleted.
    """
    removeView(id: ID!, viewID: ID!): Dashboard!
}

extend type Query {
    """
    Return dashboards granted to the authenticated user.
    """
    dashboards: DashboardConnection!
}

type DashboardConnection {

    """
    A list of dashboards.
    """
    nodes: [Dashboard!]!
    """
    Total number of dashboards.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

input DashboardInput {
    title: String!
    grants: PermissionGrants
}

input PermissionGrants {
    users: [ID!]
    orgs: [ID!]
    global: Boolean
}

type Dashboard {
    id: ID!
    metadata: DashboardMetadata!
    views: InsightViewConnection
}

type DashboardMetadata {
    title: String!
}

type InsightViewConnection {
    """
    A list of insights.
    """
    nodes: [InsightView!]!

    """
    The total number of insights in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

extend type Mutation {

    createInsight(input: CreateInsightInput!): CreateInsightResult!

    deleteInsightView(id: ID!): EmptyResponse

    getView(input: GetInsightViewInput) : InsightViewResult!

}

"""
Input to resolve an insight view given a set of filters. In the future this will support a set of fields to aggregate.
"""
input GetInsightViewInput {
    id: ID!
    filters: InsightViewFiltersInput!
}

type InsightViewResult {
    view: InsightView!
}

"""
A sigle point in a time series.
"""
type TimeSeriesPoint {
    time: DateTime!
    value: Float!
}

"""
An insight series as defined in the insight view. This series definition will only correspond 1-1 with matched series if there is no aggregation being applied.
"""
type InsightDataSeries {
    options: InsightDataSeriesOptions!
    definition: InsightDataSeriesDefinition!
    matchedSeries: [InsightMatchedDataSeries!]!
}

"""
A single matched data series with information about the grouping the series is associated to.
"""
type InsightMatchedDataSeries {
    aggregateTags: [InsightAggregationTag!]!
    timeSeries: [TimeSeriesPoint!]!
}

"""
Key-value pair of a group (aggregate) and its match for an insight view.
"""
type InsightAggregationTag {
    name: String!
    value: String!
}

"""
Options that correspond to a defined data series.
"""
union InsightDataSeriesOptions = LineChartDataSeriesOptions

"""
Definition for the mechanism for how the series is generated.
"""
union InsightDataSeriesDefinition = InsightSearchQueryDataSeriesDefinition

"""
Options that correspond with an entire view.
"""
union InsightViewOptions = LineChartOptions

"""
Options for an entire line chart
"""
type LineChartOptions {
    title: String
}

"""
Options for a single line chart data series
"""
type LineChartDataSeriesOptions {
    color: String
    label: String
}

"""
Definition for how an insight series is generated using a Sourcegraph search query.
"""
type InsightSearchQueryDataSeriesDefinition {
    query: String!
}

"""
An insight view is like a 'lens' into an underlying timeseries. It wraps visualization options, filter options, aggregation options, permissions, and other
high level concerns around access to a data series.
"""
type InsightView implements Node {
    id: ID!
    filters: InsightViewFilters!
    options: InsightViewOptions!
    dataSeries: [InsightDataSeries!]!
}

type InsightViewFilters {
    includeRepoRegex: String
    excludeRepoRegex: String
}

type CreateInsightResult {
    view: InsightView!
}

input CreateInsightInput {
    lineChart: LineChartInsightViewInput
}

input LineChartInsightViewInput {
    series: [LineChartDataSeriesInput]!
    filters: InsightViewFiltersInput!
}

"""
Default filters for this insight view.
"""
input InsightViewFiltersInput {
    includeRepoRegex: String
    excludeRepoRegex: String
}

"""
An insight data series for a line chart.
"""
input LineChartDataSeriesInput {
    searchSeries: SearchDataSeriesInput
    options: LineChartDataSeriesOptionsInput
}

"""
Options for a line chart data series
"""
input LineChartDataSeriesOptionsInput {
    label: String
    lineColor: String
}

"""
Construct an insight data series using a Sourcegraph search query.
"""
input SearchDataSeriesInput {
    query: String!
    repositoryScope: RepositoryScopeInput!
    timeScope: DataSeriesTimeScopeInput!
}

"""
A custom repository scope for an insight data series.
"""
input RepositoryScopeInput {
    global: Boolean
    repositories: [String!]
}

"""
A custom time scope for an insight data series.
"""
input DataSeriesTimeScopeInput {
    stepInterval: TimeIntervalStepInput
}

"""
A time scope defined using a time interval (ex. 5 days)
"""
input TimeIntervalStepInput {
    unit: TimeIntervalStepUnit!,
    value: Int!
}

enum TimeIntervalStepUnit {
    HOUR
    DAY
    WEEK
    MONTH
    YEAR
}


"""
A list of insights.
"""
type InsightConnection {
    """
    A list of insights.
    """
    nodes: [Insight!]!

    """
    The total number of insights in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
An insight about code.
"""
type Insight {
    """
    The short title of the insight.
    """
    title: String!

    """
    The description of the insight.
    """
    description: String!

    """
    Data points over a time range (inclusive)
    """
    series: [InsightsSeries!]!

    """
    Unique identifier for this insight.
    """
    id: String!
}

"""
A series of data about a code insight.
"""
type InsightsSeries {
    """
    The label used to describe this series of data points.
    """
    label: String!

    """
    Data points over a time range (inclusive)

    If no 'from' time range is specified, the last 90 days of data is assumed.

    If no 'to' time range is specified, the current point in time is assumed.

    includeRepoRegex will include in the aggregation any repository names that match the provided regex

    excludeRepoRegex will exclude in the aggregation any repository names that match the provided regex
    """
    points(from: DateTime, to: DateTime, includeRepoRegex: String, excludeRepoRegex: String): [InsightDataPoint!]!

    """
    The status of this series of data, e.g. progress collecting it.
    """
    status: InsightSeriesStatus!

    """
    Metadata for any data points that are flagged as dirty due to partially or wholly unsuccessfully queries.
    """
    dirtyMetadata: [InsightDirtyQueryMetadata!]!
}

"""
A code insight data point.
"""
type InsightDataPoint {
    """
    The time of this data point.
    """
    dateTime: DateTime!

    """
    The value of the insight at this point in time.
    """
    value: Float!
}

"""
An insight query that has been marked dirty (some form of partially or wholly unsuccessful state).
"""
type InsightDirtyQueryMetadata {
    """
    The number of dirty queries for this data point and reason combination.
    """
    count: Int!

    """
    The reason the query was marked dirty.
    """
    reason: String!

    """
    The time in the data series that is marked dirty.
    """
    time: DateTime!
}

"""
Status indicators for a specific series of insight data.
"""
type InsightSeriesStatus {
    """
    The total number of points stored for this series, at the finest level
    (e.g. per repository, or per-repository-per-language) Has no strict relation
    to the data points shown in the web UI or returned by `points()`, because those
    are aggregated and this number _can_ report some duplicates points which get
    stored but removed at query time for the web UI.

    Why its useful: an insight may look like "it is doing nothing" but in reality
    this number will be increasing by e.g. several thousands of points rapidly.
    """
    totalPoints: Int!

    """
    The total number of jobs currently pending to add new data points for this series.

    Each job may create multiple data points (e.g. a job may create one data point per
    repo, or language, etc.) This number will go up and down over time until all work
    is completed (discovering work takes almost as long as doing the work.)

    Why its useful: signals "amount of work still to be done."
    """
    pendingJobs: Int!

    """
    The total number of jobs completed for this series. Note that since pendingJobs will
    go up/down over time, you CANNOT divide these two numbers to get a percentage as it
    would be nonsense ("it says 90% complete but has been like that for a really long
    time!").

    Does not include 'failedJobs'.

    Why its useful: gives an indication of "how much work has been done?"
    """
    completedJobs: Int!

    """
    The total number of jobs that were tried multiple times and outright failed. They will
    not be retried again, and indicates the series has incomplete data.

    Use ((failedJobs / completedJobs) * 100.0) to get an approximate percentage of how
    much data the series data may be missing (e.g. ((30 / 150)*100.0) == 20% of the series
    data is incomplete (rough approximation, not precise).

    Why its useful: signals if there are problems, and how severe they are.
    """
    failedJobs: Int!

    """
    The time that the insight series completed a full iteration and queued up records for processing. This can
    effectively be used as a status that the insight is still processing if returned null.
    """
    backfillQueuedAt: DateTime
}
