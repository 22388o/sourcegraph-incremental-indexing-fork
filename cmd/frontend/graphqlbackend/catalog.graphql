extend type Query {
    """
    [WIP]
    """
    component(name: String!): Component
    components(query: String, first: Int, after: String): ComponentConnection!
    graph(query: String): CatalogGraph!
    groups: [Group!]!
    group(name: String!): Group
}

enum ComponentLifecycle {
    PRODUCTION
    EXPERIMENTAL
}

enum ComponentStatusState {
    EXPECTED
    ERROR
    FAILURE
    PENDING
    SUCCESS
    INFO
}

union EntityOwner = Person | Group

type Group implements Node {
    id: ID!
    name: String!
    title: String!
    description: String
    url: String!
    parentGroup: Group
    ancestorGroups: [Group!]!
    childGroups: [Group!]!
    descendentGroups: [Group!]!
    members: [Person!]!
    ownedEntities: [Component!]!
}

type CatalogGraph {
    nodes: [Component!]!
    edges: [ComponentRelationEdge!]!
}

type ComponentRelationEdge {
    type: ComponentRelationType!
    outNode: Component!
    inNode: Component!
}

type ComponentRelatedEntityConnection {
    edges: [ComponentRelatedEntityEdge!]!
}

enum ComponentRelationType {
    DEPENDS_ON
    DEPENDENCY_OF
    PART_OF
    HAS_PART
}

type ComponentRelatedEntityEdge {
    node: Component!
    type: ComponentRelationType!
}

type ComponentStatus implements Node {
    id: ID!
    contexts: [ComponentStatusContext!]!

    """
    The combined status (from all status contexts).
    """
    state: ComponentStatusState!
}

type ComponentStatusContext implements Node {
    id: ID!
    name: String!
    state: ComponentStatusState!
    title: String!
    description: String
    targetURL: String
}

type WhoKnowsEdge {
    node: Person!
    reasons: [String!]!
    score: Float!
}

type ComponentConnection {
    nodes: [Component!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

enum ComponentKind {
    SERVICE
    APPLICATION
    WEBSITE
    LIBRARY
    TOOL
    OTHER
}

type Component implements Node {
    id: ID!
    name: String!
    kind: ComponentKind!
    description: String
    lifecycle: ComponentLifecycle!
    owner: EntityOwner
    url: String!
    status: ComponentStatus!
    codeOwners: [ComponentCodeOwnerEdge!]
    relatedEntities(query: String, first: Int, after: String): ComponentRelatedEntityConnection!
    whoKnows(query: String): [WhoKnowsEdge!]!
    sourceLocations: [TreeEntry!]!
    readme: File2
    commits(first: Int): GitCommitConnection
    authors: [ComponentAuthorEdge!]
    usage(query: String): ComponentUsage
    api(query: String): ComponentAPI
}

type ComponentAuthorEdge {
    component: Component!
    person: Person!
    authoredLineCount: Int!
    authoredLineProportion: Float!
    lastCommit: GitCommit!
}

type ComponentCodeOwnerEdge {
    node: Person!
    fileCount: Int!
    fileProportion: Float!
}

type ComponentUsage {
    locations: LocationConnection
    people: [ComponentUsedByPersonEdge!]!
    components: [ComponentUsedByComponentEdge!]!
}

type ComponentUsedByPersonEdge {
    node: Person!
    locations: LocationConnection!
    authoredLineCount: Int!
    lastCommit: GitCommit!
}

type ComponentUsedByComponentEdge {
    """
    A component that uses the query parent's component.
    """
    node: Component!
    locations: LocationConnection!
}

type ComponentAPI {
    symbols(first: Int): SymbolConnection!
    schema: File2
}

type Package implements Node {
    id: ID!
    name: String!
    url: String!
}

extend interface TreeEntry {
    components: [Component!]!
}

extend type GitBlob {
    components: [Component!]!
}

extend type GitTree {
    components: [Component!]!
}
