extend type Query {
    """
    [WIP]
    """
    catalog: Catalog!
    catalogEntity(name: String!): CatalogEntity
    groups: [Group!]!
    group(name: String!): Group
}

type Catalog {
    entities(query: String, first: Int, after: String): CatalogEntityConnection!
    graph: CatalogGraph!
}

enum CatalogEntityType {
    COMPONENT
}

enum CatalogEntityLifecycle {
    PRODUCTION
    EXPERIMENTAL
}

enum CatalogEntityStatusState {
    EXPECTED
    ERROR
    FAILURE
    PENDING
    SUCCESS
    INFO
}

interface CatalogEntity {
    id: ID!
    type: CatalogEntityType!
    name: String!
    description: String
    owner: EntityOwner
    lifecycle: CatalogEntityLifecycle!
    url: String!
    status: CatalogEntityStatus!
    codeOwners: [CatalogEntityCodeOwnerEdge!]
    relatedEntities: CatalogEntityRelatedEntityConnection!
}

union EntityOwner = Person | Group

type Group implements Node {
    id: ID!
    name: String!
    title: String!
    description: String
    url: String!
    parentGroup: Group
    ancestorGroups: [Group!]!
    childGroups: [Group!]!
    descendentGroups: [Group!]!
    members: [Person!]!
    ownedEntities: [CatalogEntity!]!
}

type CatalogGraph {
    nodes: [CatalogEntity!]!
    edges: [CatalogEntityRelationEdge!]!
}

type CatalogEntityRelationEdge {
    type: CatalogEntityRelationType!
    outNode: CatalogEntity!
    inNode: CatalogEntity!
}

type CatalogEntityRelatedEntityConnection {
    edges: [CatalogEntityRelatedEntityEdge!]!
}

enum CatalogEntityRelationType {
    DEPENDS_ON
    DEPENDENCY_OF
    PART_OF
    HAS_PART
}

type CatalogEntityRelatedEntityEdge {
    node: CatalogEntity!
    type: CatalogEntityRelationType!
}

type CatalogEntityStatus implements Node {
    id: ID!
    contexts: [CatalogEntityStatusContext!]!

    """
    The combined status (from all status contexts).
    """
    state: CatalogEntityStatusState!
}

type CatalogEntityStatusContext implements Node {
    id: ID!
    name: String!
    state: CatalogEntityStatusState!
    title: String!
    description: String
    targetURL: String
}

type CatalogEntityConnection {
    nodes: [CatalogEntity!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

enum CatalogComponentKind {
    SERVICE
    WEBSITE
    LIBRARY
    TOOL
    OTHER
}

type CatalogComponent implements Node & CatalogEntity {
    id: ID!
    type: CatalogEntityType!
    name: String!
    description: String
    owner: EntityOwner
    lifecycle: CatalogEntityLifecycle!
    url: String!
    status: CatalogEntityStatus!
    codeOwners: [CatalogEntityCodeOwnerEdge!]
    relatedEntities: CatalogEntityRelatedEntityConnection!

    kind: CatalogComponentKind!

    sourceLocations: [TreeEntry!]!
    readme: File2
    commits(first: Int): GitCommitConnection
    authors: [CatalogComponentAuthorEdge!]
    usage(query: String): CatalogComponentUsage
    api(query: String): CatalogComponentAPI
}

type CatalogComponentAuthorEdge {
    component: CatalogComponent!
    person: Person!
    authoredLineCount: Int!
    authoredLineProportion: Float!
    lastCommit: GitCommit!
}

type CatalogEntityCodeOwnerEdge {
    node: String!
    fileCount: Int!
    fileProportion: Float!
}

type CatalogComponentUsage {
    locations: LocationConnection
    people: [CatalogComponentUsedByPersonEdge!]!
    components: [CatalogComponentUsedByComponentEdge!]!
}

type CatalogComponentUsedByPersonEdge {
    node: Person!
    locations: LocationConnection!
    authoredLineCount: Int!
    lastCommit: GitCommit!
}

type CatalogComponentUsedByComponentEdge {
    """
    A component that uses the query parent's component.
    """
    node: CatalogComponent!
    locations: LocationConnection!
}

type CatalogComponentAPI {
    symbols(first: Int): SymbolConnection!
    schema: File2
}

extend interface TreeEntry {
    catalogEntities: [CatalogEntity!]!
}

extend type GitBlob {
    catalogEntities: [CatalogEntity!]!
}

extend type GitTree {
    catalogEntities: [CatalogEntity!]!
}
